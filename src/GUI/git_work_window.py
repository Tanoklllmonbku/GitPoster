# gui/git_work_window.py
from PyQt6.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QLabel,
    QListWidget, QLineEdit, QPushButton, QFileDialog, QMessageBox
)
from PyQt6.QtCore import Qt

from src.core import ProjectManager


class GitWorkWindow(QWidget):
    def __init__(self, main_window, logger):
        super().__init__()
        self.main_window = main_window
        self.logger = logger
        self.project_manager = None
        self.setup_ui()

    def setup_ui(self):
        """–°–æ–∑–¥–∞—ë—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–±–æ—á–µ–π –∑–æ–Ω—ã"""
        layout = QVBoxLayout()
        layout.setContentsMargins(20, 20, 20, 20)
        layout.setSpacing(15)

        # –ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
        self.path_label = QLabel("–ü–∞–ø–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
        self.path_label.setStyleSheet("font-weight: bold; font-size: 16px;")
        layout.addWidget(self.path_label)

        btn_select = QPushButton("üìÅ –í—ã–±—Ä–∞—Ç—å –ø—Ä–æ–µ–∫—Ç")
        btn_select.setMinimumHeight(40)
        btn_select.clicked.connect(self.select_folder)
        layout.addWidget(btn_select)

        # –°—Ç–∞—Ç—É—Å Git
        self.status_label = QLabel("Git: –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        self.status_label.setStyleSheet("color: red; font-size: 14px;")
        layout.addWidget(self.status_label)

        # –ò–∑–º–µ–Ω—ë–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        layout.addWidget(QLabel("–ò–∑–º–µ–Ω—ë–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:", styleSheet="font-weight: bold;"))

        self.file_list = QListWidget()
        self.file_list.setSelectionMode(QListWidget.SelectionMode.ExtendedSelection)
        self.file_list.setStyleSheet("font-family: Consolas, monospace;")
        layout.addWidget(self.file_list, 1)  # –†–∞—Å—Ç—è–≥–∏–≤–∞–µ–º

        # –°–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞
        layout.addWidget(QLabel("–°–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞:", styleSheet="font-weight: bold;"))
        self.commit_msg = QLineEdit()
        self.commit_msg.setPlaceholderText("–ù–∞–ø—Ä–∏–º–µ—Ä: feat: –¥–æ–±–∞–≤–∏–ª GUI")
        self.commit_msg.setMinimumHeight(40)
        layout.addWidget(self.commit_msg)

        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        btn_layout = QHBoxLayout()

        self.btn_refresh = QPushButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å")
        self.btn_refresh.setMinimumHeight(40)
        btn_layout.addWidget(self.btn_refresh)

        self.btn_commit = QPushButton("üíæ Commit")
        self.btn_commit.setMinimumHeight(40)
        btn_layout.addWidget(self.btn_commit)

        self.btn_push = QPushButton("‚úÖ Commit & Push")
        self.btn_push.setMinimumHeight(40)
        btn_layout.addWidget(self.btn_push)

        layout.addLayout(btn_layout)
        self.setLayout(layout)

        # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –∫–Ω–æ–ø–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã
        self.btn_commit.setEnabled(False)
        self.btn_push.setEnabled(False)

        # –ü—Ä–∏–≤—è–∑–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.btn_refresh.clicked.connect(self.refresh_status)
        self.btn_commit.clicked.connect(lambda: self.commit_and_push(False))
        self.btn_push.clicked.connect(lambda: self.commit_and_push(True))

    def select_folder(self):
        """–í—ã–±–æ—Ä –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
        folder = QFileDialog.getExistingDirectory(
            self,
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞",
            "",
            QFileDialog.Option.ShowDirsOnly
        )

        if folder:
            try:
                self.project_manager = ProjectManager(folder, self.logger)
                self.path_label.setText(folder)
                self.refresh_status()
                self.logger.info(f"–í—ã–±—Ä–∞–Ω–∞ –ø–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞: {folder}")
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ProjectManager: {e}")
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–µ–∫—Ç:\n{str(e)}")

    def refresh_status(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
        if not self.project_manager:
            self.logger.error("–ü–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
            self.status_label.setText("Git: –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            self.status_label.setStyleSheet("color: red;")
            self.btn_commit.setEnabled(False)
            self.btn_push.setEnabled(False)
            self.file_list.clear()
            self.file_list.addItem("–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
            if not self.project_manager.is_git_repo():
                self.status_label.setText("Git: –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                self.status_label.setStyleSheet("color: red;")
                self.btn_commit.setEnabled(False)
                self.btn_push.setEnabled(False)
                self.file_list.clear()
                self.file_list.addItem("–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è'")
                return

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
            status_lines = self.project_manager.get_status()

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            self.status_label.setText("Git: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            self.status_label.setStyleSheet("color: green;")
            self.btn_commit.setEnabled(True)
            self.btn_push.setEnabled(True)

            self.file_list.clear()
            if not status_lines or (len(status_lines) == 1 and not status_lines[0]):
                self.file_list.addItem("–ù–µ—Ç –∏–∑–º–µ–Ω—ë–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
            else:
                for line in status_lines:
                    self.file_list.addItem(line)

            self.logger.debug("–°—Ç–∞—Ç—É—Å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª—ë–Ω")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å:\n{str(e)}")

    def commit_and_push(self, push: bool):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞ –∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ø—É—à–∞"""
        if not self.project_manager:
            self.logger.error("–ü–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞")
            return

        msg = self.commit_msg.text().strip()
        if not msg:
            self.logger.warning("–°–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ")
            QMessageBox.warning(self, "–í–Ω–∏–º–∞–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞")
            return

        selected_items = self.file_list.selectedItems()
        if not selected_items:
            self.logger.warning("–§–∞–π–ª—ã –¥–ª—è –∫–æ–º–º–∏—Ç–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã")
            QMessageBox.warning(self, "–í–Ω–∏–º–∞–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –∫–æ–º–º–∏—Ç–∞")
            return

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
        files_to_commit = []
        for item in selected_items:
            text = item.text().strip()
            if text.startswith(("A ", "M ", "D ", "??")):
                filename = text.split(" ", 1)[1]
                files_to_commit.append(filename)

        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–º–∏—Ç
            commit_result = self.project_manager.commit_files(files_to_commit, msg)
            if not commit_result["success"]:
                raise Exception(commit_result["error"])

            # –í—ã–ø–æ–ª–Ω—è–µ–º push (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            if push:
                push_result = self.project_manager.push()
                if not push_result["success"]:
                    raise Exception(push_result["error"])

            self.logger.info("–ö–æ–º–º–∏—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            QMessageBox.information(self, "–ì–æ—Ç–æ–≤–æ", "–ö–æ–º–º–∏—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω!")
            self.refresh_status()

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–º–∏—Ç–∞: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–º–∏—Ç:\n{str(e)}")