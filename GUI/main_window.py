# gui/main_window.py
from PyQt6.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QPushButton,
    QLabel, QFileDialog, QLineEdit, QListWidget,
    QTabWidget, QMessageBox
)
from PyQt6.QtGui import QIcon
from core.project_manager import ProjectManager
from utils import FileHandler
from .Icons.import_icons import icon_path

# üìÅ –ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É
CONFIG_PATH = "config/user_config.json"


class MainWindow(QWidget):
    def __init__(self, logger):
        super().__init__()
        self.logger = logger
        self.project_manager: ProjectManager = None
        self.setWindowIcon(QIcon(icon_path))
        self.init_ui()

    def init_ui(self):
        self.setWindowTitle("Git Manager ‚Äî –£–º–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –≤–µ—Ä—Å–∏–π")
        self.resize(700, 550)

        layout = QVBoxLayout()

        tab_widget = QTabWidget()
        main_tab = QWidget()
        init_tab = QWidget()

        # --- –û—Å–Ω–æ–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞ ---
        main_layout = QVBoxLayout()
        self.path_label = QLabel("–ü–∞–ø–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
        btn_select = QPushButton("üìÅ –í—ã–±—Ä–∞—Ç—å –ø—Ä–æ–µ–∫—Ç")
        btn_select.clicked.connect(self.select_folder)
        main_layout.addWidget(self.path_label)
        main_layout.addWidget(btn_select)

        self.status_label = QLabel("Git: –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        self.status_label.setStyleSheet("color: red;")
        main_layout.addWidget(self.status_label)

        main_layout.addWidget(QLabel("–ò–∑–º–µ–Ω—ë–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:"))
        self.file_list = QListWidget()
        self.file_list.setSelectionMode(QListWidget.SelectionMode.ExtendedSelection)
        main_layout.addWidget(self.file_list)

        main_layout.addWidget(QLabel("–°–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞:"))
        self.commit_msg = QLineEdit()
        self.commit_msg.setPlaceholderText("–ù–∞–ø—Ä–∏–º–µ—Ä: feat: –¥–æ–±–∞–≤–∏–ª GUI")
        main_layout.addWidget(self.commit_msg)

        btn_layout = QHBoxLayout()
        self.btn_refresh = QPushButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å")
        self.btn_refresh.clicked.connect(self.refresh_status)
        self.btn_commit_only = QPushButton("üíæ Commit")
        self.btn_commit_only.clicked.connect(lambda: self.commit_and_push(push=False))
        self.btn_commit_push = QPushButton("‚úÖ Commit & Push")
        self.btn_commit_push.clicked.connect(lambda: self.commit_and_push(push=True))

        btn_layout.addWidget(self.btn_refresh)
        btn_layout.addWidget(self.btn_commit_only)
        btn_layout.addWidget(self.btn_commit_push)
        main_layout.addLayout(btn_layout)

        main_tab.setLayout(main_layout)

        # --- –í–∫–ª–∞–¥–∫–∞: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
        init_layout = QVBoxLayout()
        init_layout.addWidget(QLabel("–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):"))
        self.repo_url_input = QLineEdit()
        self.repo_url_input.setPlaceholderText("https://github.com/–≤–∞—à-—é–∑–µ—Ä/—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π.git")

        # ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ FileHandler
        try:
            config = FileHandler.load_config(CONFIG_PATH)
            last_url = config.get("last_repo_url", "")
        except Exception as e:
            self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥: {e}")
            last_url = ""
        self.repo_url_input.setText(last_url)

        init_layout.addWidget(self.repo_url_input)

        self.btn_init = QPushButton("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Git")
        self.btn_init.clicked.connect(self.initialize_git)
        init_layout.addWidget(self.btn_init)

        init_tab.setLayout(init_layout)
        tab_widget.addTab(main_tab, "–†–∞–±–æ—Ç–∞ —Å Git")
        tab_widget.addTab(init_tab, "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è")
        layout.addWidget(tab_widget)

        self.setLayout(layout)
        self.btn_commit_push.setEnabled(False)
        self.btn_commit_only.setEnabled(False)

    def select_folder(self):
        folder = QFileDialog.getExistingDirectory(self, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞")
        if folder:
            self.project_manager = ProjectManager(folder, self.logger)
            self.path_label.setText(folder)
            self.refresh_status()

    def refresh_status(self):
        if not self.project_manager:
            self.logger.error("–ü–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
            return

        if not self.project_manager.is_git_repo():
            self.status_label.setText("Git: –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            self.status_label.setStyleSheet("color: red;")
            self.btn_commit_push.setEnabled(False)
            self.btn_commit_only.setEnabled(False)
            self.file_list.clear()
            self.file_list.addItem("–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è'")
            return

        self.status_label.setText("Git: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        self.status_label.setStyleSheet("color: green;")
        self.btn_commit_push.setEnabled(True)
        self.btn_commit_only.setEnabled(True)

        status_lines = self.project_manager.get_status()
        self.file_list.clear()
        if not status_lines or (len(status_lines) == 1 and not status_lines[0]):
            self.file_list.addItem("–ù–µ—Ç –∏–∑–º–µ–Ω—ë–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
        else:
            for line in status_lines:
                self.file_list.addItem(line)

    def initialize_git(self):
        if not self.project_manager:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞")
            return

        repo_url = self.repo_url_input.text().strip()

        # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º URL —á–µ—Ä–µ–∑ FileHandler
        if repo_url:
            try:
                FileHandler.save_config({"last_repo_url": repo_url}, CONFIG_PATH)
                self.logger.info(f"–ö–æ–Ω—Ñ–∏–≥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {repo_url}")
            except Exception as e:
                self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥: {e}")

        result = self.project_manager.initialize(repo_url)

        if result["success"]:
            QMessageBox.information(self, "–ì–æ—Ç–æ–≤–æ", "–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
            self.logger.info("–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            self.refresh_status()
        else:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π")
            self.logger.error("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è")

    def commit_and_push(self, push: bool):
        if not self.project_manager:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞")
            return

        msg = self.commit_msg.text().strip()
        if not msg:
            QMessageBox.warning(self, "–í–Ω–∏–º–∞–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞")
            return

        selected_items = self.file_list.selectedItems()
        if not selected_items:
            QMessageBox.warning(self, "–í–Ω–∏–º–∞–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –∫–æ–º–º–∏—Ç–∞")
            return

        files_to_commit = []
        for item in selected_items:
            text = item.text().strip()
            if text.startswith(("A ", "M ", "D ", "??")):
                filename = text.split(" ", 1)[1]
                files_to_commit.append(filename)

        result = self.project_manager.commit_files(files_to_commit, msg)
        if not result["success"]:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∫–æ–º–º–∏—Ç–∞:\n{result['error']}")
            return

        if push:
            result = self.project_manager.push()
            if not result["success"]:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ push:\n{result['error']}")
                return

        QMessageBox.information(self, "–ì–æ—Ç–æ–≤–æ", "–ö–æ–º–º–∏—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω!")
        self.refresh_status()