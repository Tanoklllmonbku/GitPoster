# gui/git_manager.py
import subprocess
from pathlib import Path
from PyQt6.QtGui import QIcon
from PyQt6.QtWidgets import (
    QApplication, QWidget, QVBoxLayout, QHBoxLayout,
    QPushButton, QTextEdit, QLabel, QFileDialog, QLineEdit,
    QListWidget, QMessageBox, QTabWidget
)

from GUI.Icons.import_icons import icon_path

class GitManager(QWidget):
    def __init__(self):
        super().__init__()
        self.project_dir = None
        self.setWindowIcon(QIcon(icon_path))
        self.init_ui()

    def init_ui(self):
        self.setWindowTitle("Git Manager ‚Äî –£–º–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –≤–µ—Ä—Å–∏–π")
        self.resize(700, 550)

        layout = QVBoxLayout()

        # --- Tab 1: –û—Å–Ω–æ–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ---
        tab_widget = QTabWidget()
        main_tab = QWidget()
        init_tab = QWidget()

        # --- –û—Å–Ω–æ–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞ ---
        main_layout = QVBoxLayout()

        # –í—ã–±–æ—Ä –ø–∞–ø–∫–∏
        path_layout = QHBoxLayout()
        self.path_label = QLabel("–ü–∞–ø–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
        btn_select = QPushButton("üìÅ –í—ã–±—Ä–∞—Ç—å –ø—Ä–æ–µ–∫—Ç")
        btn_select.clicked.connect(self.select_folder)
        path_layout.addWidget(self.path_label)
        path_layout.addWidget(btn_select)
        main_layout.addLayout(path_layout)

        # –°—Ç–∞—Ç—É—Å
        self.status_label = QLabel("Git: –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        self.status_label.setStyleSheet("color: red;")
        main_layout.addWidget(self.status_label)

        # –ò–∑–º–µ–Ω—ë–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        main_layout.addWidget(QLabel("–ò–∑–º–µ–Ω—ë–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:"))
        self.file_list = QListWidget()
        self.file_list.setSelectionMode(QListWidget.SelectionMode.ExtendedSelection)
        main_layout.addWidget(self.file_list)

        # –°–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞
        main_layout.addWidget(QLabel("–°–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞:"))
        self.commit_msg = QLineEdit()
        self.commit_msg.setPlaceholderText("–ù–∞–ø—Ä–∏–º–µ—Ä: feat: –¥–æ–±–∞–≤–∏–ª GUI –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º")
        main_layout.addWidget(self.commit_msg)

        # –ö–Ω–æ–ø–∫–∏
        btn_layout = QHBoxLayout()
        self.btn_refresh = QPushButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å")
        self.btn_refresh.clicked.connect(self.refresh_status)
        self.btn_commit_push = QPushButton("‚úÖ Commit & Push")
        self.btn_commit_push.clicked.connect(lambda: self.commit_and_push())
        self.btn_commit_only = QPushButton("üíæ Commit (–±–µ–∑ push)")
        self.btn_commit_only.clicked.connect(lambda: self.commit_and_push(push=False))

        btn_layout.addWidget(self.btn_refresh)
        btn_layout.addWidget(self.btn_commit_only)
        btn_layout.addWidget(self.btn_commit_push)
        main_layout.addLayout(btn_layout)

        # –õ–æ–≥
        main_layout.addWidget(QLabel("–õ–æ–≥:"))
        self.log = QTextEdit()
        self.log.setReadOnly(True)
        main_layout.addWidget(self.log)

        main_tab.setLayout(main_layout)

        # --- –í–∫–ª–∞–¥–∫–∞: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
        init_layout = QVBoxLayout()

        init_layout.addWidget(QLabel("–ò–º—è:"))
        self.name_input = QLineEdit()
        self.name_input.setPlaceholderText("–í–∞—à–µ –∏–º—è")
        init_layout.addWidget(self.name_input)

        init_layout.addWidget(QLabel("Email:"))
        self.email_input = QLineEdit()
        self.email_input.setPlaceholderText("–í–∞—à email")
        init_layout.addWidget(self.email_input)

        self.btn_init = QPushButton("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Git")
        self.btn_init.clicked.connect(self.initialize_git)
        init_layout.addWidget(self.btn_init)

        init_tab.setLayout(init_layout)

        # --- –î–æ–±–∞–≤–ª—è–µ–º –≤–∫–ª–∞–¥–∫–∏ ---
        tab_widget.addTab(main_tab, "–†–∞–±–æ—Ç–∞ —Å Git")
        tab_widget.addTab(init_tab, "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è")
        layout.addWidget(tab_widget)

        self.setLayout(layout)

        # --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
        self.btn_commit_push.setEnabled(False)
        self.btn_commit_only.setEnabled(False)

    def log_message(self, text, level="info"):
        prefix = {"info": "‚úÖ", "warning": "‚ö†Ô∏è", "error": "‚ùå"}.get(level, "üìå")
        self.log.append(f"{prefix} {text}")

    def run_command(self, cmd, cwd=None):
        if not cwd:
            cwd = self.project_dir
        try:
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                encoding='utf-8',
                cwd=cwd
            )
            success = result.returncode == 0
            return success, result.stdout.strip(), result.stderr.strip()
        except Exception as e:
            return False, "", str(e)

    def select_folder(self):
        folder = QFileDialog.getExistingDirectory(self, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞")
        if folder:
            self.project_dir = Path(folder)
            self.path_label.setText(str(self.project_dir))
            self.refresh_status()

    def refresh_status(self):
        if not self.project_dir:
            self.log_message("‚ùå –ü–∞–ø–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞", "error")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, Git –ª–∏ —ç—Ç–æ
        success, _, _ = self.run_command(['git', 'rev-parse', '--is-inside-work-tree'], cwd=self.project_dir)
        if not success:
            self.status_label.setText("Git: –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            self.status_label.setStyleSheet("color: red;")
            self.btn_commit_push.setEnabled(False)
            self.btn_commit_only.setEnabled(False)
            self.file_list.clear()
            self.file_list.addItem("–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è'")
            return

        self.status_label.setText("Git: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        self.status_label.setStyleSheet("color: green;")
        self.btn_commit_push.setEnabled(True)
        self.btn_commit_only.setEnabled(True)

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
        success, stdout, stderr = self.run_command(['git', 'status', '--porcelain'], cwd=self.project_dir)
        if not success:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ Git: {stderr}", "error")
            return

        self.file_list.clear()
        if not stdout.strip():
            self.file_list.addItem("–ù–µ—Ç –∏–∑–º–µ–Ω—ë–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
            return

        for line in stdout.strip().split('\n'):
            self.file_list.addItem(line)

    def initialize_git(self):
        if not self.project_dir:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞")
            return

        name = self.name_input.text().strip()
        email = self.email_input.text().strip()
        if not name or not email:
            QMessageBox.warning(self, "–í–Ω–∏–º–∞–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ email")
            return

        if (self.project_dir / '.git').exists():
            QMessageBox.warning(self, "–í–Ω–∏–º–∞–Ω–∏–µ", "–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return

        self.log.clear()
        self.log_message(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤: {self.project_dir}")

        # git init
        success, out, err = self.run_command(['git', 'init'])
        if not success:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞: {err}", "error")
            return
        self.log_message("‚úÖ git init ‚Äî —É—Å–ø–µ—à–Ω–æ")

        # .gitignore
        gitignore = self.project_dir / '.gitignore'
        if not gitignore.exists():
            with open(gitignore, 'w', encoding='utf-8') as f:
                f.write(self.get_default_gitignore())
            self.log_message("‚úÖ .gitignore —Å–æ–∑–¥–∞–Ω")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.run_command(['git', 'config', 'user.name', name])
        self.run_command(['git', 'config', 'user.email', email])
        self.log_message("‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã user.name –∏ user.email")

        # –î–æ–±–∞–≤–ª—è–µ–º –∏ –∫–æ–º–º–∏—Ç–∏–º
        self.run_command(['git', 'add', '.'])
        self.run_command(['git', 'commit', '-m', 'docs: initial commit with project structure'])

        self.log_message("üéâ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
        QMessageBox.information(self, "–ì–æ—Ç–æ–≤–æ", "–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É '–†–∞–±–æ—Ç–∞ —Å Git'")

        self.refresh_status()

    def get_default_gitignore(self):
        return """
# Python
__pycache__/
*.pyc
*.pyo
*.pyd
*.py[cod]
*$py.class
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
pip-wheel-metadata/
share/python-wheels/
*.egg
.pytest_cache/
.coverage
.cache
nosetests.xml
coverage.xml
*.cover
.hypothesis/
.pyre/
.pytype/
.coverage.*
.cache
.pytest_cache

# –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
venv/
env/
.venv/
ENV/
.ENV/

# –õ–æ–≥–∏
logs/
*.log
.DS_Store
.DS_Store?

# Jupyter
.ipynb_checkpoints/
*.ipynb.gz

# PyInstaller
/dist/
/build/
*.spec

# IDE
.idea/
.vscode/
*.swp
*.swo

# –°–∏—Å—Ç–µ–º–Ω—ã–µ
Thumbs.db
.DS_Store
        """.strip()

    def commit_and_push(self, push=True):
        if not self.project_dir:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞")
            return

        msg = self.commit_msg.text().strip()
        if not msg:
            QMessageBox.warning(self, "–í–Ω–∏–º–∞–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞")
            return

        selected_items = self.file_list.selectedItems()
        if not selected_items:
            QMessageBox.warning(self, "–í–Ω–∏–º–∞–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –∫–æ–º–º–∏—Ç–∞")
            return

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑ —Å—Ç—Ä–æ–∫ –≤–∏–¥–∞ "M file.py"
        files_to_commit = []
        for item in selected_items:
            text = item.text().strip()
            if text.startswith(("A ", "M ", "D ", "??")):
                filename = text.split(" ", 1)[1]
                files_to_commit.append(filename)

        self.log.clear()
        self.log_message("üîÑ –í—ã–ø–æ–ª–Ω—è—é...")

        # git add –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        success, out, err = self.run_command(['git', 'add'] + files_to_commit)
        if not success:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ git add: {err}", "error")
            return
        self.log_message(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(files_to_commit)}")

        # git commit
        success, out, err = self.run_command(['git', 'commit', '-m', msg])
        if not success:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–º–∏—Ç–∞: {err}", "error")
            return
        self.log_message(f"‚úÖ –ö–æ–º–º–∏—Ç: {msg}")

        # git push
        if push:
            success, out, err = self.run_command(['git', 'push'])
            if not success:
                self.log_message(f"‚ùå –û—à–∏–±–∫–∞ push: {err}", "error")
                return
            self.log_message("‚úÖ git push")
        else:
            self.log_message("‚ÑπÔ∏è Push –ø—Ä–æ–ø—É—â–µ–Ω")

        self.log_message("üéâ –ì–æ—Ç–æ–≤–æ!")
        self.refresh_status()


def main():
    app = QApplication([])
    window = GitManager()
    window.show()
    app.exec()


if __name__ == '__main__':
    main()